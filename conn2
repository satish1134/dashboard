import vertica_python
import argparse
import logging
import pandas as pd
from vertica_python import errors as v_errors

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def parse_args():
    # ... your existing code ...

def get_vertica_connection(args):
    # ... your existing code ...

def create_table_if_not_exists(conn, schema_name, tgt_table_name):
    cur = conn.cursor()
    try:
        cur.execute(f"""
            CREATE TABLE IF NOT EXISTS {schema_name}.{tgt_table_name} (
                SUBJECT_AREA VARCHAR,
                DAG_NAME VARCHAR,
                OVERRIDE_COMM_CHANNEL VARCHAR,
                SCHEDULED_RUN_TIME_IN_EST VARCHAR,
                SLA_EST VARCHAR,
                CRITICAL_DAG VARCHAR,
                STATUS VARCHAR,
                DAG_START_TIME TIMESTAMP,
                DAG_END_TIME TIMESTAMP,
                ELAPSED_TIME VARCHAR,
                MODIFIED_TS TIMESTAMP
            )
        """)
    except v_errors.QueryError as e:
        logger.error(f"Error creating table: {e}")
        raise

def insert_data_to_vertica(conn, schema_name, tgt_table_name, df):
    cur = conn.cursor()
    for index, row in df.iterrows():
        try:
            cur.execute(f"""
                INSERT INTO {schema_name}.{tgt_table_name} VALUES (
                    '{row['SUBJECT_AREA']}', '{row['DAG_NAME']}', '{row['OVERRIDE_COMM_CHANNEL']}', 
                    '{row['SCHEDULED_RUN_TIME_IN_EST']}', '{row['SLA_EST']}', '{row['CRITICAL_DAG']}', 
                    '{row['STATUS']}', '{row['DAG_START_TIME']}', '{row['DAG_END_TIME']}', 
                    '{row['ELAPSED_TIME']}', '{row['MODIFIED_TS']}'
                )
            """)
        except v_errors.QueryError as e:
            logger.error(f"Error inserting data: {e}")
            raise

if __name__ == "__main__":
    args = parse_args()
    conn_info = get_vertica_connection(args)
    with vertica_python.connect(**conn_info) as conn:
        try:
            logger.info("Connection established")
            create_table_if_not_exists(conn, args.schema, args.tgt_table_name)
            # Replace this with the actual DataFrame containing your data
            df = get_xcom('chk_dag_status', 'report_patrol')
            insert_data_to_vertica(conn, args.schema, args.tgt_table_name, df)
        except Exception as e:
            logger.error(f"Error: {e}")
            exit(-1)
